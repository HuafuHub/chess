{"version":3,"sources":["types/SquareType.ts","types/GameTYpe.ts","components/Square.tsx","components/Board.tsx","components/Game.tsx","App.tsx","index.tsx"],"names":["Square_enum","Game_enum","Next_step","Square","props","occupy","red","className","black","onClick","handleClick","index","Board","list","map","item","key","i","Game","state","init","handle","game","playing","doStep","none","next","Math","random","this","blackWin","redWin","win","row","floor","col","pos","setState","prevState","includes","arr","slice","judge","showStep","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4eb44dfd.chunk.js","sourcesContent":["export enum Square_enum {\n  none,\n  red,\n  black,\n}\n\n","export enum Game_enum {\n  playing,\n  blackWin,\n  redWin,\n  win\n}\nexport enum Next_step {\n  black,\n  red\n}","import React from 'react'\nimport { Square_enum} from '../types/SquareType'\n\n\ntype Square_prop = {\n  occupy: Square_enum\n  index: number\n  handleClick?: (i: number) => void\n}\n/**\n * 棋格，根据不同的数据显示不同的样式\n *\n * 1. 空格\n * 2. 红方棋子占据\n * 3. 黑方棋子占据\n */\nexport default function Square(props: Square_prop): JSX.Element {\n  if (props.occupy === Square_enum.red) {\n    return (\n      <div className=\"square\">\n        <div className=\"red\"></div>\n      </div>\n    )\n  } else if (props.occupy === Square_enum.black) {\n    return (\n      <div className=\"square\">\n        <div className=\"black\"></div>\n      </div>\n    )\n  } else {\n    return <div className=\"square empty\" onClick={() => {\n      props.handleClick  && props.handleClick(props.index)\n    }}></div>\n  }\n}\n","import React from 'react'\nimport Square from './Square'\nimport { Square_enum } from '../types/SquareType'\n\ntype Board_prop = {\n  list: Square_enum[]\n  handleClick?: (i: number) => void\n}\nexport default function Board(props: Board_prop): JSX.Element {\n  const list = props.list.map((item, index) => {\n    return (\n      <Square\n        occupy={item}\n        key={index}\n        index={index}\n        handleClick={(i) => {\n          props.handleClick && props.handleClick(i)\n        }}\n      />\n    )\n  })\n  return <div className=\"board\">{list}</div>\n}\n","import React, { Component, ReactNode } from 'react'\nimport Board from './Board'\nimport { Square_enum } from '../types/SquareType'\nimport { Game_enum, Next_step } from '../types/GameTYpe'\ninterface Istate {\n  list: Square_enum[]\n  game: Game_enum\n  next: Next_step\n}\nexport default class Game extends Component {\n  state: Istate = {\n    ...this.init(),\n  }\n\n  //初始化游戏\n  init(): Istate {\n    return {\n      list: [\n        Square_enum.none,\n        Square_enum.none,\n        Square_enum.none,\n        Square_enum.none,\n        Square_enum.none,\n        Square_enum.none,\n        Square_enum.none,\n        Square_enum.none,\n        Square_enum.none,\n      ],\n      game: Game_enum.playing,\n      next: Math.random() > 0.5 ? Next_step.black : Next_step.red,\n    }\n  }\n  //提示步骤\n  showStep(): ReactNode {\n    if (this.state.game !== Game_enum.playing) {\n      switch (this.state.game) {\n        case Game_enum.blackWin:\n          return <div className=\"win black\">黑方胜利</div>\n        case Game_enum.redWin:\n          return <div className=\"win red\">红方胜利</div>\n        case Game_enum.win:\n          return <div className=\"win\">平局</div>\n      }\n    } else if (this.state.next === Next_step.black) {\n      return <div className=\"black\">黑方落子</div>\n    } else {\n      return <div className=\"red\">红方落子</div>\n    }\n  }\n  //判定\n  judge(i: number) {\n    //横向判定\n    const row = Math.floor(i / 3) * 3\n    //纵向判定\n    const col = i % 3\n    //斜向判定\n    const pos = i % 2 === 0\n    if (\n      (this.state.list[row] === this.state.list[row + 1] &&\n        this.state.list[row] === this.state.list[row + 2] &&\n        this.state.list[row] !== Square_enum.none) ||\n      (this.state.list[col] === this.state.list[col + 3] &&\n        this.state.list[col] === this.state.list[col + 6] &&\n        this.state.list[col] !== Square_enum.none) ||\n      (pos &&\n        this.state.list[0] === this.state.list[4] &&\n        this.state.list[0] === this.state.list[8] &&\n        this.state.list[0] !== Square_enum.none) ||\n      (pos &&\n        this.state.list[2] === this.state.list[4] &&\n        this.state.list[2] === this.state.list[6] &&\n        this.state.list[2] !== Square_enum.none)\n    ) {\n      if (this.state.next === Next_step.black) {\n        this.setState((prevState) => ({\n          ...prevState,\n          game: Game_enum.redWin,//红方胜利\n        }))\n      } else {\n        this.setState((prevState) => ({\n          ...prevState,\n          game: Game_enum.blackWin,//黑方胜利\n        }))\n      }\n    }\n    if (!this.state.list.includes(Square_enum.none)) {\n      this.setState((prevState) => ({\n        ...prevState,\n        game: Game_enum.win,//平局\n      }))\n    }\n  }\n  //落子\n  doStep(i: number) {\n    const arr: Square_enum[] = this.state.list.slice(0)\n    if (this.state.next === Next_step.black) {\n      arr[i] = Square_enum.black\n      //黑方落子后改变棋格状态\n      this.setState(\n        (prevState) => ({\n          ...prevState,\n          list: arr,\n          next: Next_step.red,\n        }),\n        //黑方落子后进行游戏判定\n        () => this.judge(i)\n      )\n    } else if (this.state.next === Next_step.red) {\n      arr[i] = Square_enum.red\n      //红方落子后改变棋格状态\n      this.setState(\n        (prevState) => ({\n          ...prevState,\n          list: arr,\n          next: Next_step.black,\n        }),\n        //红方落子后改变棋格状态\n        () => this.judge(i)\n      )\n    }\n  }\n  //棋格点击处理\n  handle = (i: number) => {\n    if (this.state.game === Game_enum.playing) {\n      this.doStep(i)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <h1> # 字棋</h1>\n        {this.showStep()}\n        <Board list={this.state.list} handleClick={this.handle} />\n        <button onClick={() => this.setState(this.init())}>重新开始</button>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport './App.css' //游戏样式\nimport Game from './components/Game'//游戏组件\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}